###################### Resolving conflict ######################

When such a situation occurs, it stops right before the merge commit so that you can resolve the conflicts manually.
The great part of Git's merging process is that it uses the familiar edit/stage/commit workflow to resolve merge conflicts. 
When you encounter a merge conflict, running the git status command shows you which files need to be resolved. 

For example, if both branches modified the same section of hello.py, you would see something like the following:
On branch main
Unmerged paths:
(use "git add/rm ..." as appropriate to mark resolution)
both modified: hello.py


###################### How conflicts are presented ######################
When Git encounters a conflict during a merge, 
It will edit the content of the affected files with visual indicators that mark both sides of the conflicted content. 
These visual markers are: <<<<<<<, =======, and >>>>>>>. 
It's helpful to search a project for these indicators during a merge to find where conflicts need to be resolved.

here is some content not affected by the conflict
<<<<<<< main
this is conflicted text from main
=======
this is conflicted text from feature branch
>>>>>>> feature branch;

content before the ======= marker is the receiving branch and the part after is the merging branch.

Once you've identified conflicting sections, you can go in and fix up the merge to your liking. 
When you're ready to finish the merge, all you have to do is run git add on the conflicted file(s) to tell Git they're resolved. 
Then, you run a normal git commit to generate the merge commit. 
It’s the exact same process as committing an ordinary snapshot, which means it’s easy for normal developers to manage their own merges.



###################### Types of merge conflicts ######################
A merge can enter a conflicted state at two separate points

1. Git fails to start the merge 
when Git sees there are changes in either the working directory or staging area of the current project. 
it is not because of conflicts with other developer's, but conflicts with pending local changes. The local state will need to be stabilized using git stash, git checkout, git commit or git reset. 
  
A merge failure on start will output the following error message:
error: Entry '<fileName>' not uptodate. Cannot merge. (Changes in working directory)

2. Git fails during the merge
A failure DURING a merge indicates a conflict between the current local branch and the branch being merged. 
This indicates a conflict with another developers code. 
Git will do its best to merge the files but will leave things for you to resolve manually in the conflicted files. 

A mid-merge failure will output the following error message:
error: Entry '<fileName>' would be overwritten by merge. Cannot merge. (Changes in staging area)


###################### How to identify merge conflicts
git status indicates that there are unmerged paths due to a conflict. 

$ git status
On branch main
You have unmerged paths.
(fix conflicts and run "git commit")
(use "git merge --abort" to abort the merge)

Unmerged paths:
(use "git add <file>..." to mark resolution)

both modified:   merge.txt



###################### Git commands that can help resolve merge conflicts ######################
git status
git log --merge   ( list of commits that conflict between the merging branches )
git diff

### Tools for when git fails to start a merge
git checkout      ( used for undoing changes to files, or for changing branches )
git reset --mixed ( to undo changes to the working directory and staging area )

### Tools for when git conflicts arise during a merge
git merge --abort ( exit from the merge process and return the branch to the state before the merge began )
git reset         ( used during a merge conflict to reset conflicted files to a know good state )



