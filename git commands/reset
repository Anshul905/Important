versatile tool for undoing changes
It has three primary forms of invocation ( --soft, --mixed, --hard )
used to reset your current branch to a specific state
used to undo changes and revert the repository to a known state.
ref pointers are updated to the specified commit.

Git reset will never delete a commit, however, commits can become 'orphaned' which means there is no direct path from a ref to access them. 
These orphaned commits can usually be found and restored using git reflog
Git will permanently delete any orphaned commits after it runs the internal garbage collector. By default, Git is configured to run the garbage collector every 30 days.

Don't reset public history 
- You should never use git reset  when any snapshots after have been pushed to a public repository. After publishing a commit, you have to assume that other developers are reliant upon it.
- The point is, make sure that you’re using git reset ＜commit＞ on a local experiment that went wrong—not on published changes.  
  If you need to fix a public commit, the git revert command was designed specifically for this purpose.



At a surface level, git reset is similar in behavior to git checkout. 
Where git checkout solely operates on the HEAD ref pointer, git reset will move the HEAD ref pointer and the current branch ref pointer both , 
that's why we can check out to the main ( HEAD ) but can not go to main ( HEAD ) using reset 

initial 
a -> b -> c -> d ( HEAD, main )

git checkout b 
a -> b ( HEAD ) -> c -> d ( main )

git reset b 
a -> b ( HEAD , main ) -> c -> d

moves the branch pointer ( main ) to the specified commit 
git reset will modify the state of the three trees. The ref pointer modification always happens and is an update to the third tree, the Commit tree.



#################### commands #################### 
git reset <file>
git reset <commit>
git rest <branch>

git reset HEAD~1 OR git reset HEAD^ ( reset to previous commit )
git reset --hard HEAD~2 ( completely removing the last two snapshots )

git reset <file-path> 
git reset <commit-id> <file-path> 
git reset <file1> <file2> <file3> 
git reset HEAD . 
git reset 

--soft , --hard options can be used with all commands  [ except while resetting files command ]


# Move HEAD and current branch pointer back to the previous commit
git reset --soft HEAD~1
# Move HEAD and current branch pointer back to the previous commit and unstage changes
git reset HEAD~1
# Move HEAD and current branch pointer back to the previous commit and discard all changes
git reset --hard HEAD~1



################# with files #######################
git reset command with the --soft or --hard options does not work with specific files. 
The --soft and --hard options apply to the entire repository and cannot be used to reset individual files.

Unstage All Staged Files
  git reset 
  git reset HEAD . 

Unstage a File/s 
  git reset  <file-path> 
  git reset  <file1> <file2> <file> 

Unstage a File/s to specified commit
  git reset <commit-id> <file-path>   
  git reset <commit-id> <file1> <file2> <file> 

If you want to discard changes - use checkout command 
### Discards changes in the working directory for the specified file.
git checkout HEAD -- <file>
git checkout <commit> -- <file>




########################### Main options ###########################
--soft   ==>                                              commit history   ==> all the changes in working directory and staging area will be untouched ( all the commits changes moved to staged ) 
--mixed  ==>                            staged snapshot , commit history   ==> all the changes in staging area will be moved to working directory ( all changes from commits to unstaged )
--hard   ==> all ( working directory ,  staged snapshot ,  commit history ) ==> all the changes in working directory and staging area will be discarded 


With all git reset invocations, the first action reset takes is to reset the commit tree. 

default
git reset
git reset --mixed HEAD  
Instead of HEAD any Git SHA-1 <commit-id> hash can be used


######## --hard 
1. reset the commit tree to the specified commit 
2. Discard all changes in the working directory and the staging area but does not touch untracked files. ( irreversibly ) 
3. It will reset tracked files to the last commit but does not touch untracked files.

This means any pending work that was hanging out in the Staging Index and Working Directory will be lost.

Important Considerations
Data Loss: 
Using git reset --hard will discard all uncommitted changes in your working directory and staging area. These changes cannot be easily recovered.
Caution: 
Be very careful when using this command, especially if you have important uncommitted work. It is often a good idea to stash your changes first if you might want to keep them: git stash

git reset --hard HEAD ( HEAD is the default )
git reset --hard                           ==> reset to most recent commit 
git reset --hard  <commit-id>              ==> reset to a Specific Commit 
git reset --hard  <branch-name>            ==> reset to a Specific Branch ( HEAD of that branch )


######## --mixed ( default )
1. reset the commit tree to the specified commit 
2. keep all changes in your working directory. ( git status )

all changes from middle commits to unstaged ( working directory ) ( red , need to git add ...) 

git reset --mixed HEAD ( --mixed and HEAD is the default )
git reset                                   ==> reset to most recent commit 
git reset --mixed  <commit-id>              ==> reset to a Specific Commit 
git reset --mixed  <branch-name>            ==> reset to a Specific Branch ( HEAD of that branch )


######## --soft
1. reset the commit tree to specified commit 
2. keeping changes in both the staging area and the working directory , The Staging Index and the Working Directory are left untouched 

A soft reset will only reset the Commit History.
keep all your changes staged and ready to commit ==> all changes from middle commits to staged ( green , need to git commit ...)


Important Considerations
Preparation for Amending Commits: 
  This command is useful when you want to uncommit the latest commit but keep all changes staged for a new commit. 
  eg. rename a commit 

git reset --soft HEAD ( HEAD is the default )
git reset --soft                           ==> reset to most recent commit 
git reset --soft  <commit-id>              ==> reset to a Specific Commit 
git reset --soft  <branch-name>            ==> reset to a Specific Branch ( HEAD of that branch )





########################### 3 Tree Mechanisms ###########################
Git's internal state management systems. Sometimes these mechanisms are called Git's "three trees". 
Trees may be a misnomer, as they are not strictly traditional tree data-structures. They are, however, node and pointer-based data structures that Git uses to track a timeline of edits. 

1. The working directory ( First tree )
Modified/Untracked - These changes are currently a part of the first tree, "The Working Directory"

2. Staging index ( Second tree )
This tree is a complex internal caching mechanism. Git generally tries to hide the implementation details of the Staging Index from the user.
To accurately view the state of the Staging Index we must utilize a lesser known Git command git ls-files
git ls-files - essentially a debug utility for inspecting the state of the Staging Index tree.

$ git ls-files  reset.txt
filename.txt
$ git ls-files -s reset.txt
100644 e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 0   filename

without -s or --staged -->  output is simply a list of file names and paths that are currently part of the index.
The -s option displays additional metadata for the files in the Staging Index. This metadata is the staged contents' mode bits, object name, and stage number.

$ git add reset.txt
$ git ls-files -s reset.txt
100644 d7d77c1b04b5edd5acfc85de0b592449e5303770 0       reset.txt
We can see that the object SHA for reset_lifecycle_file has been updated from e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 to d7d77c1b04b5edd5acfc85de0b592449e5303770.
d7d77c1b04b5edd5acfc85de0b592449e5303770 is the standard Git object SHA-1 hash. It is a hash of the content of the files.    
The Commit History stores its own object SHA's for identifying pointers to commits and refs and , the Staging Index has its own object SHA's for tracking versions of files in the index.


3. Commit history ( Third Tree )
The git commit command adds changes to a permanent snapshot that lives in the Commit History.
This snapshot also includes the state of the Staging Index at the time of commit.
The changeset has been added to the Commit History. 



