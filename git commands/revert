The git revert command can be considered an 'undo' type command, however, it is not a traditional undo operation. 
Instead of removing the commit from the project history, it figures out how to invert the changes introduced by the commit and appends a new commit with the resulting inverse content.
This prevents Git from losing history, which is important for the integrity of your revision history and for reliable collaboration.
Reverting should be used when you want to apply the inverse of a commit from your project history.

How it works ??
The git revert command is used for undoing changes to a repository's commit history. Other 'undo' commands like, git checkout and git reset, move the HEAD and branch ref pointers to a specified commit
Git revert also takes a specified commit, however, git revert does not move ref pointers to this commit. 
A revert operation will take the specified commit, inverse the changes from that commit, and create a new "revert commit". 
The ref pointers are then updated to point at the new revert commit making it the tip of the branch.


############ Common Operation ############
-e or --edit ( default , opens configured system editor and prompts you to edit the commit message prior to committing the revert )
--no-edit ( inverse of the -e option )
-n OR --no-commit ( Instead of creating the new commit this option will add the inverse changes to the Staging Index and Working Directory. )



############ Commands ############
git revert HEAD
*git revert HEAD --no-edit 


Resetting vs. reverting
It's important to understand that git revert undoes a single commit
it does not "revert" back to the previous state of a project by removing all subsequent commits. In Git, this is actually called a reset, not a revert.
Advantage over resetting 
1. it doesn’t change the project history, which makes it a “safe” operation for commits that have already been published to a shared repository
2. git revert is able to target an individual commit at an arbitrary point in the history, whereas git reset can only work backward from the current commit.
   eg.  if you wanted to undo an old commit with git reset, you would have to remove all of the commits that occurred after the target commit, remove it, 
        then re-commit all of the subsequent commits. Needless to say, this is not an elegant undo solution.



############ DEMO ############
$ mkdir git_revert_test
$ cd git_revert_test/
$ git init .

$ touch demo_file
$ git add demo_file
$ git commit -am"initial commit"

$ echo "initial content" >> demo_file
$ git commit -am"add new content to demo file"

$ echo "prepended line content" >> demo_file
$ git commit -am"prepend content to demo file"

$ git log --oneline
86bb32e prepend content to demo file
3602d88 add new content to demo file
299b15f initial commit

$ git revert HEAD
[main b9cd081] Revert "prepend content to demo file" 1 file changed, 1 deletion(-)

This will revert the latest commit. This is the same behavior as if we reverted to commit 3602d8815dbfa78cd37cd4d189552764b5e96c58. 
Similar to a merge, a revert will create a new commit which will open up the configured system editor prompting for a new commit message. 

$ git log --oneline 1061e79 
Revert "prepend content to demo file" 
86bb32e prepend content to demo file 
3602d88 add new content to demo file 
299b15f initial commit

the 2nd and 4th commits represent the exact same code base and the 3rd commit is still in our history just in case we want to go back to it down the road.


